{
  "name": "IDCrash",
  "tagline": "Automatically identifies and cracks hashes.",
  "body": "# IDCrash\r\n\r\n###UPDATE - July 2016\r\n1. Fixed lots of bugs\r\n   * Now displays correct hash-type after cracking!\r\n   * No longer performs needless work!\r\n   * `cracked_hashes.txt`'s contents aren't lost after every run!\r\n   * Now detects your OS by default!\r\n   * Other stuff!\r\n2. **Added Windows support**\r\n3. Made code easier to read (I hope)\r\n4. Changed `main()` to be much less of a clusterfμ¢*.\r\n\r\n##About\r\n\r\nThis is a Python script that combines psypanda's **hashID** and **hashcat** functionality.\r\n\r\nIt's likely full of bugs, so use at your own risk, but it should be useful for CTF events and the like.\r\n\r\nSimply run `main.py` with Python, enter your hash, and the program will try all hashcat options that hashID delegates to it until it either cracks a hash or runs out of options.\r\n\r\nTo test functionality, try hashing \"password\". This is included in the default wordlist.\r\n\r\n####Wordlists\r\nI only provide a sample/testing wordlist. To use this effectively, you'll need to supply your own wordlist. Check [here](https://hashcat.net/forum/thread-1236.html) for a large array of wordlists.\r\n\r\n\r\n##### Credit goes to **psypanda** and the **hashcat team** for two great programs that are used in this script.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}